<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "mybatis-3-mapper.dtd" >
<mapper namespace="me._hanho.nextjs_shop.seller.SellerMapper">

	<select id="getSellerProductList">
		SELECT p.product_id, p.name, p.color_name, p.price, p.created_at, p.view_count, p.wish_count, p.seller_id,
			ms.menu_name AS sub_menu_name, mt.menu_name AS top_menu_name, mt.gender
		FROM nextjs_shop_product p
		JOIN nextjs_shop_menu_sub ms ON p.menu_sub_id = ms.menu_sub_id
		JOIN nextjs_shop_menu_top mt ON mt.menu_top_id = ms.menu_top_id
		WHERE p.seller_id = #{seller_id}
	</select>
	<select id="selectDetailsByProductIds">
		SELECT product_detail_id, product_id, add_price, stock, created_at, size, sales_count
		FROM nextjs_shop_product_detail
		WHERE product_id IN
		<foreach collection="ids" item="id" open="(" close=")" separator=",">
			#{id}
		</foreach>
		ORDER BY product_id, size
	</select>
	<insert id="addProduct">
		INSERT INTO nextjs_shop_product(name, color_name, price, seller_id, menu_sub_id)
		VALUES(#{name}, #{color_name}, #{price}, #{seller_id}, #{menu_sub_id})
	</insert>
	<update id="updateProduct">
		UPDATE nextjs_shop_product
		SET name = #{name}, color_name = #{color_name}, price = #{price}, sale_stop = #{sale_stop}, menu_sub_id = #{menu_sub_id}
		WHERE product_id = #{product_id}
	</update>
	<insert id="addProductDetail">
		INSERT INTO nextjs_shop_product_detail(product_id, add_price, stock, size)
		VALUES(#{product_id}, #{add_price}, #{stock}, #{size})
	</insert>
	<update id="updateProductDetail">
		UPDATE nextjs_shop_product_detail
		SET add_price = #{add_price}, stock = #{stock}
		WHERE product_detail_id = #{product_detail_id}
	</update>
	<select id="getSellerCouponList">
		SELECT *
		FROM nextjs_shop_coupon
		WHERE seller_id = #{seller_id} OR seller_id IS NULL
	</select>
	<insert id="addCoupon">
    	INSERT INTO nextjs_shop_coupon(description, coupon_code, discount_type, discount_value, max_discount,
        	minimum_order_before_amount, status, is_stackable, is_product_restricted, amount, start_date, end_date, seller_id)
    	VALUES(#{description}, #{coupon_code}, #{discount_type}, #{discount_value}, #{max_discount},
	        #{minimum_order_before_amount}, #{status}, #{is_stackable}, #{is_product_restricted}, #{amount}, #{start_date},
	        #{end_date}, #{seller_id})
	</insert>
	<update id="updateCouponStatus">
		UPDATE nextjs_shop_coupon
		SET status = #{status}
		WHERE coupon_id = #{coupon_id}
	</update>
	<select id="getSellerCouponAllow">
		SELECT ca.coupon_allowed_id, ca.coupon_id, ca.product_id, p.name, p.created_at
		FROM nextjs_shop_coupon_allowed ca
		JOIN nextjs_shop_product p ON p.product_id = ca.product_id
		WHERE coupon_id = #{coupon_id}
	</select>
	<delete id="deleteAllsellerCouponAllow">
		DELETE FROM nextjs_shop_coupon_allowed
		WHERE coupon_id = #{coupon_id}
	</delete>
	<insert id="insertSellerCouponAllowList">
	    INSERT INTO nextjs_shop_coupon_allowed (coupon_id, product_id)
	    VALUES
	    <foreach collection="productIds" item="pid" separator=",">
	        (#{coupon_id}, #{pid})
	    </foreach>
	</insert>
	<insert id="issueCouponsToUsers">
		INSERT INTO nextjs_shop_usercoupon (user_id, coupon_id)
		VALUES 
 		<foreach collection="userIds" item="uid" separator=",">
			(#{uid}, #{coupon_id})
		</foreach>
	</insert>
	<select id="getProductViewCountList">
	    SELECT pv.user_id, u.name AS user_name, pv.product_id,
			p.name AS product_name,
			COUNT(*) AS view_count,
			MAX(pv.view_date) AS latest_date
	    FROM nextjs_shop_product_view pv
    	JOIN nextjs_shop_product p ON p.product_id = pv.product_id
	    JOIN nextjs_shop_user u ON u.user_id = pv.user_id
	    WHERE p.seller_id = #{sellerId}
	    GROUP BY pv.user_id, pv.product_id, u.name, p.name
	    ORDER BY latest_date DESC, view_count DESC
	</select>
	<select id="getProductWishCountList">
		SELECT MAX(w.created_at) AS latest_date, w.user_id AS user_id, u.name AS user_name,
			GROUP_CONCAT(p.name ORDER BY w.created_at DESC SEPARATOR ',') AS productNames
		FROM nextjs_shop_wish w
		JOIN nextjs_shop_product p ON p.product_id = w.product_id
		JOIN nextjs_shop_user u    ON u.user_id = w.user_id
		WHERE p.seller_id = #{sellerId}
		GROUP BY w.user_id, u.name
		ORDER BY latest_date DESC
	</select>
	<select id="getBrandBookmarkList">
		SELECT bb.created_at, bb.user_id, u.name AS user_Name
		FROM nextjs_shop_brand_bookmark bb
		JOIN nextjs_shop_user u ON u.user_id = bb.user_id
		WHERE seller_id = #{seller_id}
		ORDER BY bb.created_at DESC
	</select>
	<select id="getUserInCartCountList">
		SELECT
			MAX(c.created_at) AS latest_date, COUNT(*) AS inCartCount, c.user_id AS user_id, u.name AS user_name,
			GROUP_CONCAT(DISTINCT p.name ORDER BY c.created_at DESC SEPARATOR ',') AS productNames
	    FROM nextjs_shop_cart c
	    JOIN nextjs_shop_product_detail d ON d.product_detail_id = c.product_detail_id
	    JOIN nextjs_shop_product p        ON p.product_id = d.product_id
	    JOIN nextjs_shop_user u           ON u.user_id = c.user_id
	    WHERE p.seller_id = #{seller_id}
	    GROUP BY c.user_id, u.name
	    ORDER BY latest_date DESC
	</select>
	
</mapper>
